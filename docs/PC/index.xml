<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PC Tips on Tomokazu NOMURA</title>
    <link>http://tomokazu518.github.io/public/PC/</link>
    <description>Recent content in PC Tips on Tomokazu NOMURA</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <atom:link href="http://tomokazu518.github.io/public/PC/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>パソコン関係Q&amp;A</title>
      <link>http://tomokazu518.github.io/public/PC/QandA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://tomokazu518.github.io/public/PC/QandA/</guid>
      <description>はじめに 1年生から毎年聞かれる質問とわたしの回答。これらはあくまで私見。大学の公式見解ではない。ここに書いたからもう聞くなということではない。&#xA;パソコンを買うならいつが良いですか？2年生になってからでも良いですか？ パソコン買うタイミングとして最良なのは，常に「いま」。一生使い続けるものならじっくり選べばいいかもしれないが，パソコンの性能は日進月歩。多くの場合は卒業までしか使わないと思うので，買うのが早ければ早いほど長く使えてお得。&#xA;はじめは安いものを買った方が良いですか？ 「パソコン初心者だから，まずは安いものを買った方が良い」というのは間違い。上級者であれば，いろいろ自分でチューンナップして，性能が低いパソコンでもうまく使うことができる。しかし，初心者が性能の低いパソコンを使うと，動作が遅くてイライラするだけ。すぐに嫌になって使わなくなってしまうだろう。インターネットを見るだけ，Officeを使うだけってよく聞くけど，そういった作業が比較的パソコンのスペックを必要とする。できれば最新世代か1〜2世代前くらいまでの，core-i5以上，メモリは16G以上のものを選ぼう。それでも10万円未満で買えるはず。スマホを少し安い機種にすれば，十分なスペックのパソコン買えると思うよ。&#xA;ノートとデスクトップどっちが良いですか？ 用途によるとしか答えようがないが，少し性能の良いノートパソコンを買っておけば，外部ディスプレイやキーボードをつないでデスクトップのように使うこともできる。パソコンは自分のものがいちばん使いやすいので，授業やゼミ，図書館で使うことを考えればノートの方が良いと思う。&#xA;WindowsとMacどっちが良いですか？ これも用途によるとしか答えようがないが，プログラミングや統計分析であればMacがおすすめ。サーバーのOSはほとんどLinuxだけど，Mac OSとLinuxはどちらもUnixがベースなので共通点が多い。Windowsでも最近は仮想化という仕組みでLinuxを動かすことができるので問題はない。&#xA;Microsoft Officeがインストールされたパソコンを買った方が良いですか？ 多くの大学ではOffice 365 (サブスク)が導入されていて，自分のパソコンにも自由にインストールできるようになっている。その場合は不要。Officeなしの方が安く買えるのであれば，そちらを選ぼう。&#xA;ウィルス対策ソフトは必要ですか？ 個人的な見解では不要。しかし，大学のネットワークに接続するのであれば，ウィルス対策ソフトをインストールすることが義務になっている場合が多い。ルールであればインストールする以外に選択肢はない。ちなみにWindowsにはもともとWindows Defenderというセキュリティが組み入れられているが，ウィルス対策ソフトによってはWindows Defenderよりも軽量で快適だし，導入するメリットがないわけではない。わたしはすべてのウィルス対策ソフトを試したわけではないが，使った中で良かったのはESETホームセキュリティエッセンシャル。とにかく動作が軽く，価格もお手頃。1台1年と5台3年であまり価格が変わらない。どうしても無料が良いならAvastあたりが定番。&#xA;おすすめのパソコンは？ おすすめのパソコンいくつか，Amazonのリンクを張っておく (アフィリエイト)。おすすめの価格帯は15万円程度。&#xA;Macであれば，Macbook Airの13インチ。M1チップ以降のもの (Apple Silicon)を買おう。Apple SiliconのMacに関しては，メモリは8GBでも十分という声が多い。SSDは用途次第だけど，ふつうは256GBでも十分だと思う。&#xA;2世代前のM2搭載機種の最低スペックで13万円くらい。ちなみに，「13インチ小さくない？」はよくある質問だけど，大きければ大きいほど重いし価格も高くなる。なので，本体のディスプレイは大学や外で使うとき用と割り切って，家では24インチくらいの外部ディスプレイをつないで使うのがおすすめ。キーボードも外付けすればデスクトップのように使える (クラムシェルモード)。最近はUSB Type-Cケーブル1本だけでつなげる電源不要のモバイルモニターも安く買えるようになったので，必要なときはいっしょに持ち歩くのもあり。また，iPadを持っていればmacのサブ・ディスプレイとして使える。&#xA;Windowsだと，Macと違って性能は同じでもモニタだけ大きいやつなどという柔軟な選択が可能。持ち運ぶことが多いのであれば，個人的には14インチがちょうど良くおすすめ。マウス・コンピュータあたりは価格も手頃。メモリの増設などができるので良い。Toshiba，Fujitsu，Panasonic，Vaioは同じようなスペックでももう少し価格が高くて拡張性はない。ただ，どのメーカーも価格が高い分いろいろ使いやすい工夫はこらしてあって，別に拡張の必要性は感じないと思うので，あとは好みの問題。ちなみに，FUJITSUのLIFEBOOK UHシリーズはめちゃくちゃ軽くてバッテリ駆動時間も長いので，外で使うには良い。&#xA;15万円のパソコンといえば高いと思うかもしれないが，4年間使うと考えれば1ヶ月あたり3000円くらいなので，スマホの通信料くらいのもの。大学の授業料はその20倍とか30倍なわけで，少しの追加投資を惜しんで授業料に見合うだけの効果を得られないのはもったいない。これは，教科書についてもいえることで，たかだか数千円の教科書代をケチって，授業内容を中途半端にしか理解できないとすれば，授業料がもったいないと思わない？&#xA;とはいえ，支出は最小限にしたいというのは当然。上で紹介した15万円程度のパソコンは大学で使うのに十分な性能だが，そこからなにかをあきらめれば当然価格は安くなる。DELLやHP，ASUS，Lenovoなど海外メーカーのパソコンであれば，同じようなスペックで10万円未満で買える。何が違うかというと，だいたい重い (1.5kg)のとバッテリ駆動時間が短いことが多い (もちろん機種による)。ただ，重さというのは，ノートパソコンだけ持つと違いが大きいが，結局カバンにはほかにもいろんなものを入れるので，900gも1.5kgもそこまで変わらない (個人差あり)。そう考えれば15.6インチのものを買うのもあり。ちなみに17インチになると，通常サイズのカバンからははみ出るので持ち運びは厳しい。最近は，大学内でも電源をとれる場所も多いので，バッテリの駆動時間もそこまで気にしなくても良いかもしれない。</description>
    </item>
    <item>
      <title>WSL(Windows Subsystem for Linux) 2 導入メモ</title>
      <link>http://tomokazu518.github.io/public/PC/wsl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://tomokazu518.github.io/public/PC/wsl/</guid>
      <description> WSL2？ WSL2のインストール 初期設定 WindowsとWSL間のファイル共有 WSL2？ WSLはLinuxのためのWindows上の仮想環境 LinuxのプログラムをWindowsで利用したいときに便利 LatexのコンパイルはLinuxの方が速いし安定しているのでWSLでやるのがおすすめ WindowsマシンでもMacやLinuxと共通の環境を構築できる 基本的にはコマンド操作だがGUIアプリも動く WSL2のインストール BIOSで仮想化支援機能を有効にする 最初から有効になっていることも多い BIOSでの設定方法はメーカーによって異なるが，IntelだとIntel Virtualization Technology(VTx)，AMDだとAMD-VとかSVMとかいう設定項目 Windows 11では，仮想化支援機能が有効になった状態で，PowerShellに以下のように入力するだけでインストールできる。デフォルトでは，Ubuntuがインストールされる。 wsl --install すでにWSLがインストールされている場合は，念のためアップデートしてUbuntuをインストール。 wsl --update wsl install -d Ubuntu 初期設定 インストールしたLinuxディストリビューションを起動する(スタートメニューにUbuntuのショートカットができているはず) 初回起動時は，設定が行われるため数分かかる 起動すると新規ユーザー名とパスワードを聞かれる(パスワードは入力しても表示されないので注意) (Linuxのシェルで)パッケージのアップデート sudo apt update sudo apt upgrade -y Linuxのシェルを起動しなくても，WindowsのコマンドプロンプトやPowerShellからLinuxのコマンドを実行することができる wslコマンド，もしくはubuntu runコマンドを使う wsl ls -l ubuntu run ls -l WindowsとWSL間のファイル共有 WindowsからLinuxのファイルへアクセスするには，エクスプローラーのアドレスバーに&amp;quot;¥¥wsl$&amp;ldquo;と入力 Linuxからは，/mnt/下にWindows側のドライブがマウントされる(Cドライブは/mnt/c/) ただし，LinuxとWindowsでは互いにファイルシステムが違うため，アクセスに時間がかかる ちょっとした読み書きには支障ないが，Texのコンパイルなど頻繁に多くのファイルを書き換えるような場合には体感できるくらい遅い Linuxで使うファイル(Texなど)はLinux側，Windowsで使うファイル(MS Officeのファイルなど)はWindows側に置いておくのが良い </description>
    </item>
    <item>
      <title>WSLでLatexとPandoc</title>
      <link>http://tomokazu518.github.io/public/PC/latex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://tomokazu518.github.io/public/PC/latex/</guid>
      <description>はじめに WSLを使えば仮想環境のLinuxでtexのコンパイルを行うことが可能 Windowsでもtex環境は構築できるがコンパイルが遅い Windowsは文字コードの問題など，ならではのトラブルも多い とはいえ文書を編集するときは使い慣れたWindows環境の方が捗るので，ソースの編集はWindows上で行い，コンパイルはWSLで行うという話 PandocもWSLに入れておいた方が便利 Pandocはmarkdownで書いたファイルをいろいろな形式(PDF, Word, tex, htmlなどなど)に変換できるコンバータ markdownはtexに比べてシンプルで可読性が高い&#xA;→基本的に執筆はmarkdownで行って，tex経由でPDF化するのが良いと思う 数式や図表の挿入，文献参照(bibtex)などかなりの部分はmarkdownでも記述できる 相互参照(texの\label, \ref)はpandoc-crossrefというフィルターをインストールすれば可能 Latex Tex Liveのインストール fontconfigパッケージをインストールしておく sudo apt intall libfontconfig Tex Liveインストーラを利用する ここからisoファイルをダウンロード ダウンロードしたisoファイルをWindowsでマウント WindowsのGドライブにマウントしたとすれば，以下のコマンドでWSLにもマウントできる sudo mkdir /mnt/g sudo mount -t drvfs G: /mnt/g マウントしたディレクトリに移動して，インストーラを実行(デフォルト設定で問題ないので&amp;quot;I&amp;quot;を入力してインストールを開始) cd /mnt/g sudo ./install-tl パスを通す(tlmgrコマンドを使って/usr/local/binにシンボリックリンクを追加，削除したいときは&amp;quot;add&amp;quot;を&amp;quot;remove&amp;quot;に) sudo /usr/local/texlive/????/bin/*/tlmgr path add パッケージのアップデート sudo tlmgr update --self --all Windowsからの使い方 Windowsのコマンドラインで実行したいコマンドの前にwslをつけるだけ たとえば，Linuxのuplatexを使ってsample.texをコンパイルするには wsl uplatex sample.tex Latex用エディタの設定でコンパイルに用いるコマンドの頭にwslをつけておけばOk Latex環境の構築はVisual Studio Codeがおすすめ WSLを使うのであれば，Visual Studio Codeが便利 VSCodeがLinuxのインターフェイスになる(VSCodeを使って，Linux上のファイルの編集やコンパイラの呼び出しなどができる) VSCodeはローカルのWSLだけでなく，リモート環境にもSSHで接続でき 非力なラップトップでもVSCodeだけインストールしておけば，自宅などのPCにリモートアクセスしてソースの編集やコンパイルなどが可能 VSCode用拡張機能のTex Workshopが便利 Pandoc Pandocのインストール UbuntuのaptでインストールされるPandocはかなり古い 最新版はGithubから入手可能 debファイルをダウンロード wget https://github.</description>
    </item>
    <item>
      <title>BeamerスライドをMarkdownで簡単に作成</title>
      <link>http://tomokazu518.github.io/public/PC/beamer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://tomokazu518.github.io/public/PC/beamer/</guid>
      <description>はじめに Markdownとは Markdownの書き方例 Beamerスライドの作成 Markdownファイルの作成 Markdownファイルの作成例 Pandocで変換 変換結果 はじめに Beamerのスライドはかっこいいので，それを見てLatexを使いたいと思った人も多いはず。しかし，Latexを覚えるのは大変だし，いろいろコマンドが入り混じったソースコードは可読性が低い。&#xA;そこで，Markdownという非常にシンプルな記法で内容を記述し，Pandocというソフトを使ってBeamerに変換する方法を紹介する。&#xA;Markdownは単なるテキスト・ファイルなので，編集はPowerPointよりも軽快で内容に集中できるし，Gitでバージョン管理することもできる。ただし，Latex経由でPDFを作成するため，Latexのコンパイル環境は必要。また，PDFに変換するまでスライドの仕上がりを確認できない点や，PowerPointのようにコンテンツを柔軟にレイアウトすることが難しい点もデメリットかもしれない。&#xA;Markdownとは Markdownは，文書を書くための記法の一つ。テキスト・エディタで作成する。文書の構造(章・節)や，箇条書き，文字列の強調などをシンプルな記法で表現することができ，Pandocというツールを用いればhtmlやword形式，Latexなどに変換することができる(いくつかのフォーマットは逆にMarkdownへと変換することも可能)。&#xA;Markdownの書き方は非常にシンプル。まずは，以下だけ覚えれば十分。&#xA;#がレベル1の見出し，##がレベル2の見出しといったように行頭に＃をつけるとその行が節や章の見出しとなる 段落の区切りは，間に一行空行を入れることで表現 箇条書きは，項目の頭に&amp;quot;- &amp;ldquo;をつける 番号付き箇条書きは，項目の頭に”1. &amp;ldquo;をつける(番号はすべて1.にしておけば自動で振ってくれる) 数式は&amp;rdquo;$&amp;ldquo;で囲ってTeX形式で書く(インラインの場合は$1個，別行立ての場合は$2個) 強調する文字列は&amp;rdquo;**&amp;ldquo;で囲む，イタリックにしたい文字は&amp;rdquo;*&amp;ldquo;で囲む Markdownの書き方例 --- title: Markdownの書き方例 --- # はじめに(レベル1の見出し) ## はじめの一歩(レベル2の見出し) - 箇条書き1 - 箇条書き2 ## 次の一歩(レベル2の見出し) 1. 番号付き箇条書きは，1.をつける 1. すべて1.にしておく 1. 自動で番号を振ってくれる # 文章を書く(レベル1の見出し) 内容はテキスト・エディタなどで作成する。メモ帳でも十分だが，Markdown専用のエディタもいろいろあるので，使いやすいものを選ぼう。 段落を区切るときには，改行してさらに一行空行を挿入する。段落のはじめに一文字空ける必要はない(wordやPDFに変換するときに自動でフォーマットされる)。 文字列の**強調**，*斜体*は，”*&amp;#34;で囲むことで表現できる。 $$\log (1+x) \approx x$$ インライン数式は，$\log (1+x) \approx x$のように&amp;#34;$&amp;#34;で囲む。 htmlに変換するコマンドは以下。&#xA;pandoc sample1.md -o sample1.html&amp;#34; Beamerスライドの作成 MarkdownからBeamerプレゼンテーションのPDFを作成するために必要なものは以下。&#xA;Markdownを書くためのエディタ メモ帳でも書くことはできる ちょっと気の利いたエディタならMarkdownのシンタックスハイライトやアウトライン解析に対応している おすすめはVisual Studio Code Pandoc 無料の文書形式変換ソフト→Markdownからだとhtmlやword，Latexなどいろいろ変換できる Windows, Mac, Linux対応 Tex MarkdownをWordやhtmlに変換するには不要 Beamerスライドの作成やLatex経由でPDFを作成するためには必須 Windowsで使う場合は，WSL上にインストールするかDockerを使うのがおすすめ PDFファイルのビューア WindowsであればSumatra PDF一択 Sumatra PDFは開いているファイルをロックしないので，ファイルを閉じなくても上書きできる(ファイルを上書きすると自動的に再読み込みされる) Sumatra PDFは動作が軽いので，普段使いにもおすすめ Macであればskim VS CodeでもPDFを表示できる，とくにTexWorkshopのPDFビューアは便利 フォント IPAフォントがおすすめ Markdownファイルの作成 Beamerスライド作るときのポイントは以下。</description>
    </item>
    <item>
      <title>WSLでRStudio Server</title>
      <link>http://tomokazu518.github.io/public/PC/rstudio-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://tomokazu518.github.io/public/PC/rstudio-server/</guid>
      <description>RStudio Server？ WSLへのインストール R本体のインストール RStudio Serverのインストール tidyverseをインストール 通信を暗号化する RStudio Server？ RStudioをブラウザで使うことができる，自前のRStudio Cloud インターフェイスや操作性はデスクトップ版RStudioとほぼ変わらない メリット サーバー1台に入れておけば，どのマシンからも同じ環境で分析可能 中断した作業を別のマシンでシームレスに再開することができる iPadやスマホでも使うことができる(実際に使うかどうかは別として) RとRStudioはWindowsにインストールして使うにはいろいろハードルがあるので，WSLにインストールして使うのがおすすめ&#xA;→**最近RやRStudioは，Dockerを使うのが簡単で便利。**Dockerについてはそのうち詳しく書こうと思う。 WSLへのインストール R本体のインストール 基本的には，RStudio公式で解説されている通り Rで計量政治学入門にも解説がある まず，証明書とレポジトリを追加 wget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc sudo add-apt-repository &amp;#39;deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/&amp;#39; RおよびRStudio Serverを使うために必要なパッケージをインストール sudo apt install -y r-base r-base-core r-recommended r-base-dev gdebi-core build-essential libcurl4-gnutls-dev libxml2-dev libssl-dev RStudio Serverのインストール Ubuntu用のRStudio Serverをダウンロード wget https://rstudio.org/download/latest/stable/server/$(lsb_release -cs)/rstudio-server-latest-amd64.deb RStudio Serverのインストール sudo gdebi rstudio-server-latest-amd64.deb インストールが完了するとsystemdに登録されるので，WSLを起動すれば自動的にRStudio Serverがバックグラウンドで動き始める http://localhost:8787にアクセスしてRStudio Serverが動いていることを確認 ユーザー名とパスワードは，Ubuntuに設定したもの Chromeでショートカットを作成しウィンドウで起動するようにすれば，デスクトップ版のRStudioとほぼ同じように使える LAN内のほかのPCやインターネット経由でもアクセスできるようにすれば便利だが，このまま外部からアクセスできるようにするのは危険なので注意 tidyverseをインストール Rにtidyverseパッケージをインストールするのに必要なパッケージをインストール sudo apt install libcurl4-openssl-dev libxml2-dev libfontconfig1-dev libharfbuzz-dev libfribidi-dev libfreetype6-dev libpng-dev libtiff5-dev libjpeg-dev わたしの場合は，上記だけでtidyverseをインストールすることができた 足りないパッケージがある場合にはエラーメッセージを読んでインストールする 通信を暗号化する 前はいろいろ具体的な方法を書いていたが，わたし自信コンピュータの専門家ではなく，セキュリティ上の問題がある気がするので，概要にとどめておくことにした。</description>
    </item>
    <item>
      <title>WSLでStata</title>
      <link>http://tomokazu518.github.io/public/PC/Stata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://tomokazu518.github.io/public/PC/Stata/</guid>
      <description>はじめに StataのLinux版はWSLでも使うことができる。Linux版はCUIで使うこともできるし，GUIも普通に動く。とくにWindows版のStataで困っていなければまったく必要ない。個人的には，シェルやRStudioからStataのコードを実行できるのが便利。Jupyter notebookでも使える。&#xA;Stataのインストール WSLにLinux版Stataをインストールする方法は，公式ページに説明されている通り。 ただし，libtinfoとlibncursesを事前にインストールしておく必要がある。&#xA;sudo apt install -y libtinfo5 libncurses5 上記の公式ページの通りにインストールを実行，終わったら画面に表示される指示にしたがい，(rootのままで)stinitを実行する。&#xA;/usr/local/stata17/stinit 指示にしたがってライセンス情報を入力すればOk。&#xA;WSLでもGUIが使える。ただし，GUIを使うにはlibgtk2.0-0というパッケージが必要なのでインストールしておく。&#xA;sudo apt install libgtk2.0-0 Stataを起動するには，/usr/local/stata17/にインストールされた以下のコマンドを実行(ライセンスにかかわらずすべてインストールされるが，ライセンスのあるものしか起動できない)。&#xA;バージョン CUI起動コマンド GUI起動コマンド Stata BE stata xstata Stata SE stata-se xstata-se Stata MP stata-mp xstata-mp /usr/local/stata17にPathを通すか，エイリアスを作成しておくと便利。あと，rootになっているついでに，Stataを起動してupdate allしておくと良い。&#xA;Jupyter notebookでStataを使う PythonなどでJupyter notebookを使っているのであれば，StataもJupyter notebookで使いたいという場合は，以下の手順で可能。&#xA;Jupyter notebookのインストール たぶんAnacondaとかJupyter Labとかフルセットの環境を構築した方が良いと思うが，ここでは必要最低限でいきたい。&#xA;もしPythonのパッケージ・マネージャであるpipがインストールされていなければ，インストールする。&#xA;sudo apt install python3-pip pipを使って，Jupyter notebookをインストール。&#xA;pip3 install notebook ~/.local/bin にインストールされるので，Pathが通っていることを確認しておく。&#xA;stata_kernelのインストール 次に，Jupyter notebookでStataを操作するためのカーネルをインストール。&#xA;pip3 install stata_kernel python -m stata_kernel.install (2022.9.7現在) これでインストールされたstata_kernelは，Stata 17で使う場合にグラフ表示に不具合がある。Stata 17で使う場合には，githubからstata_session.</description>
    </item>
  </channel>
</rss>
